var documenterSearchIndex = {"docs":
[{"location":"#StringFigures.jl","page":"StringFigures.jl","title":"StringFigures.jl","text":"","category":"section"},{"location":"","page":"StringFigures.jl","title":"StringFigures.jl","text":"Documentation for StringFigures.jl","category":"page"},{"location":"#Linear-Sequences-and-knot-diagrams","page":"StringFigures.jl","title":"Linear Sequences and knot diagrams","text":"","category":"section"},{"location":"","page":"StringFigures.jl","title":"StringFigures.jl","text":"LinearSequence\n@seq_str\n@open_str\n@storer_str\nsimplify\nplot","category":"page"},{"location":"#StringFigures.LinearSequence","page":"StringFigures.jl","title":"StringFigures.LinearSequence","text":"A LinearSequence represents a knot in punctured space with a notation similar to Gauss codes.  A linear sequence is a sequence (separated by \":\") of either FrameNodes (loosely, fingers) and Crossings. \n\nSee also: seq\"\", plot\n\n\n\n\n\n","category":"type"},{"location":"#StringFigures.@seq_str","page":"StringFigures.jl","title":"StringFigures.@seq_str","text":"seq\"xxx\" returns the LinearSequence \"xxx\".\n\nSee also: open\"\", storer\"\"\n\nExamples\n\njulia> seq\"L1:R1:R2\"\nseq\"L1:R1:R2\"\n\n\n\n\n\n","category":"macro"},{"location":"#StringFigures.@open_str","page":"StringFigures.jl","title":"StringFigures.@open_str","text":"open\"xxx\" returns the opening xxx. \n\nExamples\n\njulia> open\"O0\"\nseq\"L2:R2\"\n\njulia> open\"O1\"\nseq\"L1:L5:R5:R1\"\n\njulia> open\"OA\"\nseq\"L1:x1(0):R2:x2(0):L5:R5:x2(U):L2:x1(U):R1\"\n\n\n\n\n\n","category":"macro"},{"location":"#StringFigures.@storer_str","page":"StringFigures.jl","title":"StringFigures.@storer_str","text":"storer\"xxx\" is equivalent to seq\"xxx\" but allows some fuzziness to be able to easily copy-paste  from Storer's OCR'd book :)\n\nExamples\n\njulia> osage3diamondsfig41 = storer\"Ll: x1(0): x2(U): x3(0): x4(0): x5(U): x6(0): x7(0): x8(UJ: x9(U):\n       x10(0): x11(0): x12(U): x13(UJ: x14(0): x15(U): x16(U): R2: x16(0):\n       x17(U): x18{0): x19(U): x20(0): x5(0): x4(U): x21(0): L2: x2l(U):\n       x3(U): x2(0): xl(U): x22(U): x23(0): x6(U): x20(U): x19(0): x9(0):\n       xlO (U): x18 (U): xl7(0): x15 (0): x14 (U): x13 (0): Rl: x12'(0): xll (U):\n       x8(0): x7(UJ: x23(U): x22(0) \"\nseq\"L1:x1(0):x2(U):x3(0):x4(0):x5(U):x6(0):x7(0):x8(U):x9(U):x10(0):x11(0):x12(U):x13(U):x14(0):x15(U):x16(U):R2:x16(0):x17(U):x18(0):x19(U):x20(0):x5(0):x4(U):x21(0):L2:x21(U):x3(U):x2(0):x1(U):x22(U):x23(0):x6(U):x20(U):x19(0):x9(0):x10(U):x18(U):x17(0):x15(0):x14(U):x13(0):R1:x12(0):x11(U):x8(0):x7(U):x23(U):x22(0)\"\n\n\n\n\n\n","category":"macro"},{"location":"#StringFigures.simplify","page":"StringFigures.jl","title":"StringFigures.simplify","text":"Extension-cancellation simplifications\n\n\n\n\n\n","category":"function"},{"location":"#StringFigures.plot","page":"StringFigures.jl","title":"StringFigures.plot","text":"plot(p::LinearSequence; rfact, k, randomize, labels, shadowc, kwd...)\n\nPlots p using Tutte embedding. Parallel edges are then separated by slightly translating them perpendicularly to the segment joining the two vertices.\n\nfact::Float64:     Multiplicative factor for edge width\nrfact::Float64:    Distance between parallel edges (0.02)\nrandomize::Bool:   Slightly randomize positions (false) \nlabels::Bool:      Add labels to the plot (true)\ncrossings::Bool:   Should crossings be plotted\nshadowc::colorant: Color of the string shadow (colorant\"black\")\nstringc::colorant: Color of the string (colorant\"white\")\nkwd...:            Additional options for gplot ((;)). See e.g. background_color.\n\nExample1: plot(proc\"OA::DL1|\") Example2: plot(proc\"OA::DL1|\"; shadowc=\"white\", stringc=\"black\", nodelabelc=\"black\", background_color=\"white\")\n\n\n\n\n\n","category":"function"},{"location":"#Passages","page":"StringFigures.jl","title":"Passages","text":"","category":"section"},{"location":"","page":"StringFigures.jl","title":"StringFigures.jl","text":"Passage\nReleasePassage\nTwistPassage\nExtendPassage\nPickPassage\nMultiPickPassage\nNavahoPassage\nPowerPassage\n@pass_str","category":"page"},{"location":"#StringFigures.Passage","page":"StringFigures.jl","title":"StringFigures.Passage","text":"The Passage type represents one passage or move in a string figure construction. A specific Passage can be applied to a LinearSequence as a function.\n\nSee also: ReleasePassage, TwistPassage, PickPassage, ExtendPassage, MultiPickPassage, NavahoPassage, PowerPassage, pass\"\"\n\n\n\n\n\n","category":"type"},{"location":"#StringFigures.ReleasePassage","page":"StringFigures.jl","title":"StringFigures.ReleasePassage","text":"A ReleasePassage represents the release of one loop. It is denoted by the \"□\" symbol in  Storer, which we represent in ASCII with \"D\" (for delete) \n\njulia> pass\"DL1\"(open\"OA\")\nseq\"L2:x1(U):R5:L5:x1(0):R2:x2(0):R1:x2(U)\"\n\n\n\n\n\n","category":"type"},{"location":"#StringFigures.TwistPassage","page":"StringFigures.jl","title":"StringFigures.TwistPassage","text":"A TwistPassage represents the twisting of one loop a certain number of times\n\njulia> pass\"<<<1\"\npass\"<<<1\"\n\nSee also pass\"\"\n\n\n\n\n\n","category":"type"},{"location":"#StringFigures.ExtendPassage","page":"StringFigures.jl","title":"StringFigures.ExtendPassage","text":"An ExtendPassage represents the extension of the string in order to make it taut.  It has no arguments. Represented in Storer with the symbol \"|\".\n\n\n\n\n\n","category":"type"},{"location":"#StringFigures.PickPassage","page":"StringFigures.jl","title":"StringFigures.PickPassage","text":"A PickPassage represents the action of picking a string with a given functor.  Its arguments are:\n\nfun::FrameRef  : the functor (i.e. the picking finger)\naway::Bool    : on an \"other hand\" pick, if the first movement is away the executer (default) \narg::FrameRef  : the argument (i.e. the finger holding the section of string being picked)\nnear::Bool    : is it the near portion of the string? \nover::Bool    : does the finger travels above all other string in order to reach it?\nabove::Bool   : does it pick the string from above?\n\nIn Storer, it is represented by F(A) in which Fis the functor, decorated with an  arrow on top if the finger travels over other strings (theoverflag) and a downward pointing arrow \"↓\" if it picks the argument from above (theaboveflag). The argumentArepresents a framenode, appended with the letternorfif the string picked is onenear` the executer or not. \n\n\n\n\n\n","category":"type"},{"location":"#StringFigures.MultiPickPassage","page":"StringFigures.jl","title":"StringFigures.MultiPickPassage","text":"A MultiPickPassage represents the action of picking a string with a given functor.  Its arguments are:\n\npass::Vector{[PickPassage](@ref)} : A sequence indicating a 3D move in which the functor can pass either \n\nover or under specific string segments attached to FrameNode.\n\njulia> pass\"L1o(L2n):L1u(L2f)\"\npass\"L1o(L2n):L1u(L2f)\"\n\n\n\n\n\n","category":"type"},{"location":"#StringFigures.NavahoPassage","page":"StringFigures.jl","title":"StringFigures.NavahoPassage","text":"A NavahoPassage represents the release of the lower loop in a two-loop finger.  It is denoted by the \"N\" symbol in Storer.\n\njulia> seq\"L1.1:L2:R1:L1.0\" |> pass\"NL1\"\nseq\"L1:x1(U):x2(0):L2:R1:x3(0):x1(0):x2(U):x4(U):x4(0):x3(U)\"\n\nSee also pass\"\"\n\n\n\n\n\n","category":"type"},{"location":"#StringFigures.PowerPassage","page":"StringFigures.jl","title":"StringFigures.PowerPassage","text":"A PowerPassage is just the repetition of another passage or sequence of passages\n\njulia> pass\"[<1#>1]^5\"\npass\"[<1#>1#]^5\"\n\nSee also pass\"\"\n\n\n\n\n\n","category":"type"},{"location":"#StringFigures.@pass_str","page":"StringFigures.jl","title":"StringFigures.@pass_str","text":"pass\"xxx\" creates a Passage from string \"xxx\"\n\n\n\n\n\n","category":"macro"},{"location":"#Calculus","page":"StringFigures.jl","title":"Calculus","text":"","category":"section"},{"location":"","page":"StringFigures.jl","title":"StringFigures.jl","text":"StringCalculus\nStringProcedure\n@proc_str","category":"page"},{"location":"#StringFigures.StringCalculus","page":"StringFigures.jl","title":"StringFigures.StringCalculus","text":"A StringCalculus describes an algorithm or procedure that can be applied to a string. It is represented as list of transformations (Passages). You can build a StringCalculus by using the special notation calc\"<seq>\" where <seq> is a list of Passages, possibly separated by #. A StringCalculus can be:\n\nUsed as functions on a LinearSequence, producing a new LinearSequence\nMultiplied to other StringCalculuss or Passages (concatenating the instructions)\nElevated to some power (repeating the same statements)\n\nSee also: StringProcedure\n\n\n\n\n\n","category":"type"},{"location":"#StringFigures.StringProcedure","page":"StringFigures.jl","title":"StringFigures.StringProcedure","text":"A StringProcedureconsists in an initialLinearSequenceplus aStringCalculus` to be applied to it. It represents the full \"movie\" of the figure construction. It can be\n\nindexed and iterated to access each intermediate step\nploted to show all steps\n\nSee also proc\"\"\n\n\n\n\n\n","category":"type"},{"location":"#StringFigures.@proc_str","page":"StringFigures.jl","title":"StringFigures.@proc_str","text":"proc\"xxx\" creates a StringProcedure from string \"xxx\"\n\njulia> proc\"OA::D1\"\nproc\"OA::D1#\"\n\njulia> proc\"OA::D1\" |> last\nseq\"L2:x1(U):R5:L5:x1(0):R2:x2(0):x2(U)\"\n\n\n\n\n\n","category":"macro"},{"location":"#Grammar","page":"StringFigures.jl","title":"Grammar","text":"","category":"section"},{"location":"","page":"StringFigures.jl","title":"StringFigures.jl","text":"Input of Nodes, Linear sequences, Calculus, and full Procedures is specified by a PEG using the PEG.jl library. The full grammar is shown below.","category":"page"},{"location":"","page":"StringFigures.jl","title":"StringFigures.jl","text":"SeqNode: A sequence node is either a FrameNode (i.e. a finger, or a loop in a finger), or a CrossNode, i.e. a crossing in the 2D representation of the 3D string figure. Example: node\"L1\", representing the left thumb.\n@rule int =  r\"\\d+\"\n@rule fnode = r\"[LR]\" & int & (\".\" & int)[0:1]\n@rule xnode = \"x\" & int & \"(\" & r\"[0U]\" & \")\"\n@rule snode = fnode, xnode\nLinearSequence: A linear sequence is a 2D layout of a string figure. It is a sequence of SeqNodes, so that following the string you encounter, sequentially, each node in the LinearSequence. CrossNodes appear in pairs, e.g. x10(0) and x10(U), meaning respectively that one goes on the upper string and the lower string in the crossing. Example: seq\"L1:x1(0):R2:x2(0):L5:R5:x2(U):L2:x1(U):R1\" which is Opening A, i.e. OA. You can also graphically display a linear sequence with the function plot.\n@rule snodec = snode & \":\"\n@rule linseq = (snodec[*] & snode)\nSome standard openings have been already defined, and can be retrieved with open\"O0\", open\"O1\", open\"OA\".\n@rule opening = r\"[0-9A-Za-z]*\"p\nA functor is the finger executing an action. A functor may be lateral or bilateral, the latter meaning that symmetric fingers in both hands will be executing the same action.\n@rule ffun = r\"[LR]?\" & int\nA FrameRef is a reference to one string attached to a FrameNode. l,m,u denote respectively the lowest, middle or top string on it. If there are more than 3 strings, then the second, third, etc are refered to as m1, m2, ...\n@rule fref = r\"l|u|m[1-9]?|\" & r\"[RL]?\" & r\"[0-9]\"\nPassages (passage.jl). A passage is one coordinated movement of the finger(s), which modifies the figure in some way. E.g. pass\"DL1\", releasing all strings on the left thumb.\n@rule passage = extend_p, twist_p, release_p, navaho_p, multi_pick_p, pick_p\n@rule extend_p = \"|\" & r\"!*\"p\n@rule pick_p = ffun & r\"[ou]\"p & r\"a?\"p & r\"t?\"p & r\"\\(\"p & fref & r\"[fn]\"p & \")\"\n@rule pick_pp = pick_p & r\":\"p\n@rule multi_pick_p = pick_pp[1:end] & pick_p\n@rule release_p = \"D\" & fref\n@rule navaho_p = \"N\" & ffun\n@rule twist_p = r\"(>+)|(<+)\"p & fref\nCalculuss (calculus.jl). A Calculus is a sequence of Passages, specifying a multi-step transformation of a LinearSequence. E.g. calc\"DL1#DL2\", releasing all strings on both thumbs.\n@rule passages = (passage & r\"#?\"p)\n@rule calculus = r\"\"p & passages[*]\nStringProcedure (calculus.jl). A StringProcedure is a starting position plus a Calculus. Example: OA::DL2#DR2#| which goes back to Opening 1 from Opening A. You can plot a StringProcedure with the function plot, which plots all intermediate positions.\n@rule parenseq = \"(\" & linseq & \")\"\n@rule procedure = ((parenseq,opening) & r\"::\"p & calculus)","category":"page"}]
}
